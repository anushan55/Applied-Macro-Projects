#clear console
cat("\014")
#clear all globals in memory
rm(list = ls()) #needs to go before user-written functions (not libraries) are loaded
sink()
######################+
# non-automatable globals #####
#for master scriptname and extension #####
library(rstudioapi)
MAINNAME <- rstudioapi::getActiveDocumentContext()$path #returns path+name
MAINNAME <- sub(".*/|^[^/]*$", "", MAINNAME)
MAINNAME <- substr(MAINNAME,1,nchar(MAINNAME)-2) #cut off .R
HOME <- "E:/Documents/Applied Macro/Projects/projects/" #here: path to 'projects' dir
DO <- paste0(HOME,"/project_anushan/c_program/") #here: path to folder with R.code
######################+
# launch set-up scripts #####
input <- 'project_intro_aux.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
#DEBUG <- T
#############################################+
# read-in + basic editing of raw data: create base df ####
input <- 'project_databasics.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
#############################################+
# # variable grouping, selection, creation ####
input <- 'project_varcreation_outcomes.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
input <- 'project_varcreation_treatments.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
#############################################+
# read-in + basic editing of raw data: create base df ####
input <- 'project_databasics.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
df <- df[,c("id","t","ymin1", "k", "hs", "S_less20", "S_20_24", "S_25_29", "S_30_34", "S_35_39",
+             "S_40_44", "S_45_49", "S_55_59", "S_60_64", "S_65plus", "ADMIN_ID")]
#clear gobal environment of all but uppercase objects (globals, myfunctions, scalars)
CLEARCOND()
#adapt scriptname/ rfilename and extension if NOT executed in batch mode
MAINNAME_check <- rstudioapi::getActiveDocumentContext()$path #returns path+name of script currently executed (no outsourcing to program possible)
if ( !grepl("00_execute",MAINNAME_check)) {
MAINNAME <- sub(".*/|^[^/]*$", "", MAINNAME_check)
MAINNAME <- substr(MAINNAME,1,nchar(MAINNAME)-2) #cut off .R
}
######################+
#release unused memory
gc()
################################################################################################################+
# MAIN PART ####
df<-LOAD(dfinput=paste0(DFBASE))
#create variable
#lag y
df <- df %>%                            # Add lagged column
group_by(id) %>%
dplyr::mutate(ymin1 = dplyr::lag(pwt_log_gdp_w, n = 1, default = NA)) %>%
as.data.frame()
colnames(df) <- sub("^pwt_log_kw$","k",colnames(df))
colnames(df) <- sub("^iiasa_share_hs_15_69","hs",colnames(df))
colnames(df) <- sub("^iiasa_w_15_19","S_less20",colnames(df))
colnames(df) <- sub("^iiasa_w_20_24","S_20_24",colnames(df))
colnames(df) <- sub("^iiasa_w_25_29","S_25_29",colnames(df))
colnames(df) <- sub("^iiasa_w_30_34","S_30_34",colnames(df))
colnames(df) <- sub("^iiasa_w_35_39","S_35_39",colnames(df))
colnames(df) <- sub("^iiasa_w_40_44","S_40_44",colnames(df))
colnames(df) <- sub("^iiasa_w_45_49","S_45_49",colnames(df))
colnames(df) <- sub("^iiasa_w_55_59","S_55-59",colnames(df))
colnames(df) <- sub("^iiasa_w_60_64","S_60_64",colnames(df))
colnames(df) <- sub("^iiasa_w_65_69","S_65plus" ,colnames(df))
colnames(df)
df <- df[,c("id","t","ymin1", "k", "hs", "S_less20", "S_20_24", "S_25_29", "S_30_34", "S_35_39",
"S_40_44", "S_45_49", "S_55_59", "S_60_64", "S_65plus", "ADMIN_ID")]
colnames(df)
df <- df[,c("id","t","ymin1", "k", "hs", "S_less20", "S_20_24", "S_25_29", "S_30_34", "S_35_39",
"S_40_44", "S_45_49", "S_55_59", "S_60_64", "S_65plus", "ADMIN_ID")]
df <- df[,c("id","t","ymin1", "k", "hs", "S_less20", "S_20_24", "S_25_29", "S_30_34", "S_35_39",
"S_40_44", "S_45_49", "S_55_59", "S_60_64", "S_65plus", "ADMIN_ID")]
SAVE(dfx=df)
input <- 'project_varcreation_merge.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
#############################################+
# main & subsample creation ####
input <- 'project_samplecreation_main.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
#############################################+
#var distribution checks (inherent and coding quality) ####
input<- 'project_analysis_vardistribution.R'
source(paste0(DO,input,sep=""), echo = TRUE, max=1000)
#############################################+
# regressions ####
input <- 'project_analysis_regression.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
reg1<- plm(y~ymin1+k+hs
+S_less20+S_20_24+S_25_29+S_30_34+S_35_39+S_40_44+S_45_49+S_55_59+S_60_64+S_65plus
,data = df,
effect = "twoways",
model = "within",
index = "t", "id")
View(df)
# TARGET:
# INDATA:
# OUTDATA/ OUTPUT:
################################################################################################################+
# INTRO	script-specific ####
#clear gobal environment of all but uppercase objects (globals, myfunctions, scalars)
CLEARCOND()
#adapt scriptname/ rfilename and extension if NOT executed in batch mode
MAINNAME_check <- rstudioapi::getActiveDocumentContext()$path #returns path+name of script currently executed (no outsourcing to program possible)
if ( !grepl("00_execute",MAINNAME_check)) {
MAINNAME <- sub(".*/|^[^/]*$", "", MAINNAME_check)
MAINNAME <- substr(MAINNAME,1,nchar(MAINNAME)-2) #cut off .R
}
######################+
#release unused memory
gc()
################################################################################################################+
# MAIN PART ####
df<-LOAD(dfinput=paste0(DFBASE))
#create variable
#lag y
df <- df %>%                            # Add lagged column
group_by(id) %>%
dplyr::mutate(ymin1 = dplyr::lag(pwt_log_gdp_w, n = 1, default = NA)) %>%
as.data.frame()
#continue adding other variables ..........................
colnames(df) <- sub("^pwt_log_kw$","k",colnames(df))
colnames(df) <- sub("^iiasa_share_hs_15_69","hs",colnames(df))
colnames(df) <- sub("^iiasa_w_15_19","S_less20",colnames(df))
colnames(df) <- sub("^iiasa_w_20_24","S_20_24",colnames(df))
colnames(df) <- sub("^iiasa_w_25_29","S_25_29",colnames(df))
colnames(df) <- sub("^iiasa_w_30_34","S_30_34",colnames(df))
colnames(df) <- sub("^iiasa_w_35_39","S_35_39",colnames(df))
colnames(df) <- sub("^iiasa_w_40_44","S_40_44",colnames(df))
colnames(df) <- sub("^iiasa_w_45_49","S_45_49",colnames(df))
colnames(df) <- sub("^iiasa_w_55_59","S_55-59",colnames(df))
colnames(df) <- sub("^iiasa_w_60_64","S_60_64",colnames(df))
colnames(df) <- sub("^iiasa_w_65_69","S_65plus" ,colnames(df))
colnames(df)
#df$edu2<-(df$edu)^2
#rename
#colnames(df) <- sub("urateb","UNEMRATE",colnames(df))
#restrict
df <- df[,c("id","t","ymin1", "k", "hs", "S_less20", "S_20_24", "S_25_29", "S_30_34", "S_35_39",
"S_40_44", "S_45_49", "S_55_59", "S_60_64", "S_65plus", "ADMIN_ID")]
SAVE(dfx=df)
CLEARCOND()
#adapt scriptname/ rfilename and extension if NOT executed in batch mode
MAINNAME_check <- rstudioapi::getActiveDocumentContext()$path #returns path+name of script currently executed (no outsourcing to program possible)
if ( !grepl("00_execute",MAINNAME_check)) {
MAINNAME <- sub(".*/|^[^/]*$", "", MAINNAME_check)
MAINNAME <- substr(MAINNAME,1,nchar(MAINNAME)-2) #cut off .R
}
######################+
#release unused memory
gc()
################################################################################################################+
# MAIN PART ####
df1 <- LOAD(dfinput="project_varcreation_outcomes")
df2 <- LOAD(dfinput="project_varcreation_treatments")
#merge
df <- merge(df1,df2,by="ADMIN_ID")
colnames(df)
SAVE(dfx=df)
#clear gobal environment of all but uppercase objects (globals, myfunctions, scalars)
CLEARCOND()
MAINNAME_check <- rstudioapi::getActiveDocumentContext()$path #returns path+name of script currently executed (no outsourcing to program possible)
if ( !grepl("00_execute",MAINNAME_check)) {
MAINNAME <- sub(".*/|^[^/]*$", "", MAINNAME_check)
MAINNAME <- substr(MAINNAME,1,nchar(MAINNAME)-2) #cut off .R
}
######################+
#release unused memory
gc()
################################################################################################################+
# MAIN PART ####
df<-LOAD(dfinput=paste0(DFMERGE))
#restrict to non-missing rows
dim(df)
df <- df[complete.cases(df),]
dim(df)
#save
SAVE(dfx=df,namex=MAINNAME,pattdir=A)
#clear gobal environment of all but uppercase objects (globals, myfunctions, scalars)
CLEARCOND()
#adapt scriptname/ rfilename and extension if NOT executed in batch mode
MAINNAME_check <- rstudioapi::getActiveDocumentContext()$path #returns path+name of script currently executed (no outsourcing to program possible)
if ( !grepl("00_execute",MAINNAME_check)) {
MAINNAME <- sub(".*/|^[^/]*$", "", MAINNAME_check)
MAINNAME <- substr(MAINNAME,1,nchar(MAINNAME)-2) #cut off .R
}
######################+
#release unused memory
gc()
################################################################################################################+
# MAIN PART ####
df<-LOAD(dfinput=paste0(DFMAIN),pattdir=A)
# run regression equation
reg1<- plm(y~ymin1+k+hs
+S_less20+S_20_24+S_25_29+S_30_34+S_35_39+S_40_44+S_45_49+S_55_59+S_60_64+S_65plus
,data = df,
effect = "twoways",
model = "within",
index = "t", "id")
# read-in + basic editing of raw data: create base df ####
input <- 'project_databasics.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
#############################################+
# # variable grouping, selection, creation ####
input <- 'project_varcreation_outcomes.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
input <- 'project_varcreation_treatments.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
# input <- 'm6practice_varcreation_controls_ex1.R'
# source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
#...
input <- 'project_varcreation_merge.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
#############################################+
# main & subsample creation ####
input <- 'project_samplecreation_main.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
#############################################+
#var distribution checks (inherent and coding quality) ####
input<- 'project_analysis_vardistribution.R'
source(paste0(DO,input,sep=""), echo = TRUE, max=1000)
#############################################+
# regressions ####
input <- 'project_analysis_regression.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
#clear gobal environment of all but uppercase objects (globals, myfunctions, scalars)
CLEARCOND()
#adapt scriptname/ rfilename and extension if NOT executed in batch mode
MAINNAME_check <- rstudioapi::getActiveDocumentContext()$path #returns path+name of script currently executed (no outsourcing to program possible)
if ( !grepl("00_execute",MAINNAME_check)) {
MAINNAME <- sub(".*/|^[^/]*$", "", MAINNAME_check)
MAINNAME <- substr(MAINNAME,1,nchar(MAINNAME)-2) #cut off .R
}
######################+
#release unused memory
gc()
################################################################################################################+
# MAIN PART ####
df<-LOAD(dfinput=paste0(DFBASE))
#create variable
#lag y
df <- df %>%                            # Add lagged column
group_by(id) %>%
dplyr::mutate(ymin1 = dplyr::lag(pwt_log_gdp_w, n = 1, default = NA)) %>%
as.data.frame()
#continue adding other variables ..........................
colnames(df) <- sub("^pwt_log_kw$","k",colnames(df))
colnames(df) <- sub("^iiasa_share_hs_15_69","hs",colnames(df))
colnames(df) <- sub("^iiasa_w_15_19","S_less20",colnames(df))
colnames(df) <- sub("^iiasa_w_20_24","S_20_24",colnames(df))
colnames(df) <- sub("^iiasa_w_25_29","S_25_29",colnames(df))
colnames(df) <- sub("^iiasa_w_30_34","S_30_34",colnames(df))
colnames(df) <- sub("^iiasa_w_35_39","S_35_39",colnames(df))
colnames(df) <- sub("^iiasa_w_40_44","S_40_44",colnames(df))
colnames(df) <- sub("^iiasa_w_45_49","S_45_49",colnames(df))
colnames(df) <- sub("^iiasa_w_55_59","S_55_59",colnames(df))
colnames(df) <- sub("^iiasa_w_60_64","S_60_64",colnames(df))
colnames(df) <- sub("^iiasa_w_65_69","S_65plus" ,colnames(df))
colnames(df)
#df$edu2<-(df$edu)^2
#rename
#colnames(df) <- sub("urateb","UNEMRATE",colnames(df))
#restrict
df <- df[,c("id","t","ymin1", "k", "hs", "S_less20", "S_20_24", "S_25_29", "S_30_34", "S_35_39",
"S_40_44", "S_45_49", "S_55_59", "S_60_64", "S_65plus", "ADMIN_ID")]
colnames(df)
SAVE(dfx=df)
input <- 'project_varcreation_merge.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
#############################################+
# main & subsample creation ####
input <- 'project_samplecreation_main.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
#############################################+
#var distribution checks (inherent and coding quality) ####
input<- 'project_analysis_vardistribution.R'
source(paste0(DO,input,sep=""), echo = TRUE, max=1000)
#############################################+
# regressions ####
input <- 'project_analysis_regression.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
#clear gobal environment of all but uppercase objects (globals, myfunctions, scalars)
CLEARCOND()
#adapt scriptname/ rfilename and extension if NOT executed in batch mode
MAINNAME_check <- rstudioapi::getActiveDocumentContext()$path #returns path+name of script currently executed (no outsourcing to program possible)
if ( !grepl("00_execute",MAINNAME_check)) {
MAINNAME <- sub(".*/|^[^/]*$", "", MAINNAME_check)
MAINNAME <- substr(MAINNAME,1,nchar(MAINNAME)-2) #cut off .R
}
######################+
#release unused memory
gc()
################################################################################################################+
# MAIN PART ####
df<-LOAD(dfinput=paste0(DFBASE))
#create variable
#lag y
df <- df %>%                            # Add lagged column
group_by(id) %>%
dplyr::mutate(ymin1 = dplyr::lag(pwt_log_gdp_w, n = 1, default = NA)) %>%
as.data.frame()
#continue adding other variables ..........................
colnames(df) <- sub("^pwt_log_kw$","k",colnames(df))
colnames(df) <- sub("^iiasa_share_hs_15_69","hs",colnames(df))
colnames(df) <- sub("^iiasa_w_15_19","S_less20",colnames(df))
colnames(df) <- sub("^iiasa_w_20_24","S_20_24",colnames(df))
colnames(df) <- sub("^iiasa_w_25_29","S_25_29",colnames(df))
colnames(df) <- sub("^iiasa_w_30_34","S_30_34",colnames(df))
colnames(df) <- sub("^iiasa_w_35_39","S_35_39",colnames(df))
colnames(df) <- sub("^iiasa_w_40_44","S_40_44",colnames(df))
colnames(df) <- sub("^iiasa_w_45_49","S_45_49",colnames(df))
colnames(df) <- sub("^iiasa_w_55_59","S_55_59",colnames(df))
colnames(df) <- sub("^iiasa_w_60_64","S_60_64",colnames(df))
colnames(df) <- sub("^iiasa_w_65_69","S_65plus" ,colnames(df))
colnames(df)
#df$edu2<-(df$edu)^2
#rename
#colnames(df) <- sub("urateb","UNEMRATE",colnames(df))
#restrict
df <- df[,c("id","t","ymin1", "k", "hs", "S_less20", "S_20_24", "S_25_29", "S_30_34", "S_35_39",
"S_40_44", "S_45_49", "S_55_59", "S_60_64", "S_65plus", "ADMIN_ID")]
colnames(df)
SAVE(dfx=df)
#clear gobal environment of all but uppercase objects (globals, myfunctions, scalars)
CLEARCOND()
#adapt scriptname/ rfilename and extension if NOT executed in batch mode
MAINNAME_check <- rstudioapi::getActiveDocumentContext()$path #returns path+name of script currently executed (no outsourcing to program possible)
if ( !grepl("00_execute",MAINNAME_check)) {
MAINNAME <- sub(".*/|^[^/]*$", "", MAINNAME_check)
MAINNAME <- substr(MAINNAME,1,nchar(MAINNAME)-2) #cut off .R
}
######################+
#release unused memory
gc()
################################################################################################################+
# MAIN PART ####
df1 <- LOAD(dfinput="project_varcreation_outcomes")
df2 <- LOAD(dfinput="project_varcreation_treatments")
#...
#merge
df <- merge(df1,df2,by="ADMIN_ID")
colnames(df)
SAVE(dfx=df)
#clear gobal environment of all but uppercase objects (globals, myfunctions, scalars)
CLEARCOND()
#adapt scriptname/ rfilename and extension if NOT executed in batch mode
MAINNAME_check <- rstudioapi::getActiveDocumentContext()$path #returns path+name of script currently executed (no outsourcing to program possible)
if ( !grepl("00_execute",MAINNAME_check)) {
MAINNAME <- sub(".*/|^[^/]*$", "", MAINNAME_check)
MAINNAME <- substr(MAINNAME,1,nchar(MAINNAME)-2) #cut off .R
}
######################+
#release unused memory
gc()
################################################################################################################+
# MAIN PART ####
df<-LOAD(dfinput=paste0(DFMERGE))
#restrict cols -> already in varcreation section given only vars of specific type are saved for merge
#restrict to non-missing rows
dim(df)
df <- df[complete.cases(df),]
dim(df)
#save
SAVE(dfx=df,namex=MAINNAME,pattdir=A)
#clear gobal environment of all but uppercase objects (globals, myfunctions, scalars)
CLEARCOND()
#adapt scriptname/ rfilename and extension if NOT executed in batch mode
MAINNAME_check <- rstudioapi::getActiveDocumentContext()$path #returns path+name of script currently executed (no outsourcing to program possible)
if ( !grepl("00_execute",MAINNAME_check)) {
MAINNAME <- sub(".*/|^[^/]*$", "", MAINNAME_check)
MAINNAME <- substr(MAINNAME,1,nchar(MAINNAME)-2) #cut off .R
}
######################+
#release unused memory
gc()
################################################################################################################+
# MAIN PART ####
df<-LOAD(dfinput=paste0(DFMAIN),pattdir=A)
#summarystats
summary(df)
dim(df)
head(df,20)
tail(df)
ggplot(df, aes(k,y))+geom_point()
ggplot(df, aes(ymin1,y))+geom_point()
ggplot(df, aes(hs,y))+geom_point()
#clear gobal environment of all but uppercase objects (globals, myfunctions, scalars)
CLEARCOND()
#adapt scriptname/ rfilename and extension if NOT executed in batch mode
MAINNAME_check <- rstudioapi::getActiveDocumentContext()$path #returns path+name of script currently executed (no outsourcing to program possible)
if ( !grepl("00_execute",MAINNAME_check)) {
MAINNAME <- sub(".*/|^[^/]*$", "", MAINNAME_check)
MAINNAME <- substr(MAINNAME,1,nchar(MAINNAME)-2) #cut off .R
}
######################+
#release unused memory
gc()
################################################################################################################+
# MAIN PART ####
df<-LOAD(dfinput=paste0(DFMAIN),pattdir=A)
# run regression equation
reg1<- plm(y~ymin1+k+hs
+S_less20+S_20_24+S_25_29+S_30_34+S_35_39+S_40_44+S_45_49+S_55_59+S_60_64+S_65plus
,data = df,
effect = "twoways",
model = "within",
index = "t", "id")
reg1<- plm(y~ymin1+k+hs
+S_less20+S_20_24+S_25_29+S_30_34+S_35_39+S_40_44+S_45_49+S_55_59+S_60_64+S_65plus
,data = df,
effect = "twoways",
model = "within",
reg1<- plm(y~ymin1+k+hs
+S_less20+S_20_24+S_25_29+S_30_34+S_35_39+S_40_44+S_45_49+S_55_59+S_60_64+S_65plus
,data = df,
effect = "twoways",
model = "within")
summary(reg1)
reg1<- plm(y~ymin1+k+hs
+S_less20+S_20_24+S_25_29+S_30_34+S_35_39+S_40_44+S_45_49+S_55_59+S_60_64+S_65plus
,data = df,
effect = "twoways")
reg1<- plm(y~ymin1+k+hs
+S_less20+S_20_24+S_25_29+S_30_34+S_35_39+S_40_44+S_45_49+S_55_59+S_60_64+S_65plus
,data = df,
effect = "twoways",
model = "within",
index = c("t", "id"))
summary(reg1)
