install.packages("rstudioapi")
install.packages("rstudioapi")
# PROJECT'S FULL NAME
# TARGET (of this R.script): ordered execution of R.script(s) within public file routine
#NO detailed descriptions of data, method, etc. HERE -> done in R.scripts called upon
# CONVENTIONS of file naming, abbreviations:
#R.scripts: 	in general 		-> named like the dataset they produce, i.e., _varcreation_x.R
#PROGRAMS: 	-> CAPITAL LETTERS, automatically called upon by R.script executed
#df dataframe
#l list
#var variable
# BASIC STRUCTURE:
#1) DATA PREP
# create base df
#input:
#output:
# create separate dfs for each var type
#input: base df
#output:
# create analysis df and subsamples
#input: combine var type dfs
#output: xx.rda and subsamples
#2) ANALYSIS
#for each sample: sumstats, regs, figures
################################################################################################################+
# INTRO ####
#clear console
cat("\014")
#clear all globals in memory
rm(list = ls()) #needs to go before user-written functions (not libraries) are loaded
sink()
######################+
# non-automatable globals #####
#for master scriptname and extension #####
library(rstudioapi)
MAINNAME <- rstudioapi::getActiveDocumentContext()$path #returns path+name
MAINNAME <- sub(".*/|^[^/]*$", "", MAINNAME)
MAINNAME <- substr(MAINNAME,1,nchar(MAINNAME)-2) #cut off .R
######################+
# launch set-up scripts #####
input <- 'c_program/00_execute_m6practice_intro_aux.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
#DEBUG <- T
# PROJECT'S FULL NAME
# TARGET (of this R.script): ordered execution of R.script(s) within public file routine
#NO detailed descriptions of data, method, etc. HERE -> done in R.scripts called upon
# CONVENTIONS of file naming, abbreviations:
#R.scripts: 	in general 		-> named like the dataset they produce, i.e., _varcreation_x.R
#PROGRAMS: 	-> CAPITAL LETTERS, automatically called upon by R.script executed
#df dataframe
#l list
#var variable
# BASIC STRUCTURE:
#1) DATA PREP
# create base df
#input:
#output:
# create separate dfs for each var type
#input: base df
#output:
# create analysis df and subsamples
#input: combine var type dfs
#output: xx.rda and subsamples
#2) ANALYSIS
#for each sample: sumstats, regs, figures
################################################################################################################+
# INTRO ####
#clear console
cat("\014")
#clear all globals in memory
rm(list = ls()) #needs to go before user-written functions (not libraries) are loaded
sink()
######################+
# non-automatable globals #####
#for master scriptname and extension #####
library(rstudioapi)
MAINNAME <- rstudioapi::getActiveDocumentContext()$path #returns path+name
MAINNAME <- sub(".*/|^[^/]*$", "", MAINNAME)
MAINNAME <- substr(MAINNAME,1,nchar(MAINNAME)-2) #cut off .R
######################+
# launch set-up scripts #####
input <- 'c_program/00_execute_m6practice_intro_aux.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
#DEBUG <- T
################################################################################################################+
# MAIN PART ####
#############################################+
# read-in + basic editing of raw data: create base df ####
input <- '/c_program/m6practice_databasics_ex1.R'
source(paste0(DO,input,sep=""), echo=TRUE, max=1000)
CLEARCOND()
#adapt scriptname/ rfilename and extension if NOT executed in batch mode
MAINNAME_check <- rstudioapi::getActiveDocumentContext()$path #returns path+name of script currently executed (no outsourcing to program possible)
if ( !grepl("00_execute",MAINNAME_check)) {
MAINNAME <- sub(".*/|^[^/]*$", "", MAINNAME_check)
MAINNAME <- substr(MAINNAME,1,nchar(MAINNAME)-2) #cut off .R
}
######################+
#release unused memory
gc()
################################################################################################################+
# MAIN PART ####
df<-LOAD(dfinput=paste0(DFBASE,"_ex1"))
#check label
describe(df$hjlogyl)
